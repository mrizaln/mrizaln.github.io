{
  "mandelbrot-set": {
    "name": "Mandelbrot Set Renderer",
    "technologies": ["C++", "OpenGL", "GLFW"],
    "techniques": ["Multithreading", "CPU rendering"],
    "date-start": "Dec 2022",
    "date-end": "Jan 2023",
    "url": "https://github.com/mrizaln/mandelbrot-set",
    "summary": "Ever since I saw a video about Mandelbrot Set on Youtube, I've always wanted to make <strong>my own</strong> renderer. This is my attempt. The rendering is done in the CPU so it's very slow even though I have utilized multithreading.</br></br>The next attempt is rendering a <a href='proj-details.html?proj=julia-set'>Julia Set</a> but using GPU rendering technique which is much much faster.",
    "role": "Author",
    "preview-vid": "assets/vid/portfolio/mandelbrot-set.webm",
    "preview-img": "assets/img/portfolio/mandelbrot-set.webp"
  },
  "julia-set": {
    "name": "Julia Set Renderer",
    "technologies": ["C", "OpenGL", "GLFW", "GLSL"],
    "techniques": ["Multithreading", "GPU rendering"],
    "date-start": "Jan 2023",
    "date-end": "May 2023",
    "url": "https://github.com/mrizaln/julia-set",
    "summary": "Julia Set is similar to Mandelbrot in that it shows <em>pretty images</em> (what a shallow understanding, haha). The similarity of Julia Set and Mandelbrot Set lies in the equation that produces the set, both uses the same equation but different variable. Since the Mandelbrot Set and Julia Set are related, this renderer also draws the Mandelbrot in the background. If the point in which the Julia Set is evaluated lies inside the Mandelbrot Set (white), the Julia Set will be connected, otherwise the Julia Set will be disconnected.</br></br>Unlike previous attempt at rendering a <a href='proj-details.html?proj=mandelbrot-set'>Mandelbrot Set</a> using CPU rendering, this one uses GPU rendering (leveraging GLSL). This makes the renderer much faster and responsive.",
    "role": "Author",
    "preview-img": "assets/img/portfolio/julia-set.webp",
    "preview-vid": "assets/vid/portfolio/julia-set.webm"
  },
  "ray-tracing": {
    "name": "Ray Tracing",
    "technologies": ["Rust"],
    "techniques": ["Ray Tracing", "Multithreading", "CPU rendering"],
    "date-start": "Mar 2024",
    "date-end": "Apr 2024",
    "url": "https://github.com/mrizaln/ray-tracing-rust",
    "summary": "Ray tracing has always been a mystery to me. Ever since I stumble upon it, I've always wanted to learn more of this rendering technique. This project is my attempt at creating a ray tracer. I followed <a href='https://raytracing.github.io/'>Ray Tracing in One Weekend</a> and implemented it in Rust just because.",
    "role": "Author",
    "preview-img": "assets/img/portfolio/ray-tracing.webp",
    "preview-vid": null
  },
  "game-of-life": {
    "name": "Conway's Game of Life",
    "technologies": ["C++", "OpenGL", "GLFW"],
    "techniques": ["Multithreading", "CPU rendering"],
    "date-start": "Mar 2022",
    "date-end": "Jan 2023",
    "url": "https://github.com/mrizaln/game-of-life",
    "summary": "I have always liked Conway's Game of Life simulation. This very complex system arise from simple set of rules fascinates me. This project allows me to create such simulation.",
    "role": "Author",
    "preview-img": "assets/img/portfolio/game-of-life.webp",
    "preview-vid": "assets/vid/portfolio/game-of-life.webm"
  },
  "simple-ecs": {
    "name": "Simple ECS",
    "technologies": ["C++", "OpenGL", "GLFW"],
    "techniques": ["ECS"],
    "date-start": "Nov 2024",
    "date-end": "Nov 2024",
    "url": "https://github.com/mrizaln/simple-ecs",
    "summary": "Entity Component System (ECS) is a programming technique that is on the rise in the game development community. ECS promises games to have better performance when working with large number of entities if it was implemented in it.",
    "role": "Author",
    "preview-img": "assets/img/portfolio/simple-ecs.webp",
    "preview-vid": "assets/vid/portfolio/simple-ecs.webm"
  },
  "pong": {
    "name": "Pong",
    "technologies": ["C++", "SFML", "Cppfront"],
    "techniques": ["Transpilation"],
    "date-start": "Apr 2024",
    "date-end": "Sep 2024",
    "url": "https://github.com/mrizaln/pong-cpp2",
    "summary": "<em>stub</em>",
    "role": "Author",
    "preview-img": "assets/img/portfolio/pong.webp",
    "preview-vid": "assets/vid/portfolio/pong.webm"
  },
  "aoc-vis": {
    "name": "AOC Algotihm Visualizer",
    "technologies": ["C++", "SFML"],
    "techniques": ["CPU rendering"],
    "date-start": "Dec 2024",
    "date-end": "Dec 2024",
    "url": "https://github.com/mrizaln/aoc-2024-cpp",
    "summary": "<em>stub</em>",
    "role": "Author",
    "preview-img": "assets/img/portfolio/aoc-vis.webp",
    "preview-vid": "assets/vid/portfolio/aoc-vis.webm"
  },
  "qoipp": {
    "name": "A Quite OK Image Format Codec in C++",
    "technologies": ["C++", "qoi", "codec"],
    "techniques": ["API design", "Abstraction"],
    "date-start": "May 2024",
    "date-end": "Jun 2024",
    "url": "https://github.com/mrizaln/qoipp",
    "summary": "<em>stub</em>",
    "role": "Author",
    "preview-img": "assets/img/portfolio/qoipp.webp",
    "preview-vid": null
  },
  "dtl-modern": {
    "name": "Arbitrary Sequence Diff Library",
    "technologies": ["C++", "diff"],
    "techniques": ["Diff algorithm", "Refactoring"],
    "date-start": "Dec 2024",
    "date-end": "Dec 2024",
    "url": "https://github.com/mrizaln/dtl-modern",
    "summary": "<em>stub</em>",
    "role": "Author",
    "preview-img": "assets/img/portfolio/dtl-modern.webp",
    "preview-vid": null
  },
  "cppread": {
    "name": "Simple Console Input Library with Built-in Parser (or you can create your own custom parser)",
    "technologies": ["C++", "i/o"],
    "techniques": ["API design", "Parsing"],
    "date-start": "Sep 2024",
    "date-end": "Nov 2024",
    "url": "https://github.com/mrizaln/cppread",
    "summary": "<em>stub</em>",
    "role": "Author",
    "preview-img": "assets/img/portfolio/cppread.webp",
    "preview-vid": null
  },
  "cppread": {
    "name": "Simple Console Input Library with Easy Parsing (or Custom Parsing)",
    "technologies": ["C++", "i/o"],
    "techniques": ["API design", "Parsing"],
    "date-start": "Sep 2024",
    "date-end": "Nov 2024",
    "url": "https://github.com/mrizaln/cppread",
    "summary": "<em>stub</em>",
    "role": "Author",
    "preview-img": "assets/img/portfolio/cppread.webp",
    "preview-vid": null
  },
  "glfw-cpp": {
    "name": "GLFW RAII Wrapper for C++ (and more)",
    "technologies": ["C++", "GLFW", "Windowing system"],
    "techniques": ["API design", "Event handling", "Abstraction", "Wrapper", "RAII", "Type safety"],
    "date-start": "Apr 2024",
    "date-end": "Jan 2025",
    "url": "https://github.com/mrizaln/glfw-cpp",
    "summary": "<em>stub</em>",
    "role": "Author",
    "preview-img": "assets/img/portfolio/glfw-cpp.webp",
    "preview-vid": null
  },
  "loxx": {
    "name": "Lox Programming Language Interpreter",
    "technologies": ["Rust", "Lox", "Interpreter"],
    "techniques": ["Lexing", "Parsing", "Interpreting"],
    "date-start": "Sep 2024",
    "date-end": "Oct 2024",
    "url": "https://github.com/mrizaln/loxx",
    "summary": "<em>stub</em>",
    "role": "Author",
    "preview-img": "assets/img/portfolio/loxx.webp",
    "preview-vid": null
  },
  "hangman": {
    "name": "Hangman",
    "technologies": ["C++", "TUI"],
    "techniques": ["Console cursor control"],
    "date-start": "Jan 2022",
    "date-end": "Dec 2024 (recently rewrited)",
    "url": "https://github.com/mrizaln/hangman",
    "summary": "<em>stub</em>",
    "role": "Author",
    "preview-img": "assets/img/portfolio/hangman.webp",
    "preview-vid": "assets/vid/portfolio/hangman.webm"
  },
  "calmind": {
    "name": "Calmind App - Meditation App",
    "technologies": ["Kotlin", "Android"],
    "techniques": ["GUI"],
    "date-start": "Jan 2022",
    "date-end": "Dec 2024 (recently rewrited)",
    "url": "https://github.com/fahmiidris007/CapstoneProjectBangkit",
    "summary": "<em>stub</em>",
    "role": "Contributor",
    "preview-img": "assets/img/portfolio/calmind.webp",
    "preview-vid": null
  }
}
