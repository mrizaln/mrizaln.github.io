{
  "aoc-vis": {
    "date-end": "Dec 2024",
    "date-start": "Dec 2024",
    "name": "AOC Algotihm Visualizer",
    "preview-img": "assets/img/portfolio/aoc-vis.webp",
    "preview-img-thumb": "assets/img/portfolio/aoc-vis.thumb.webp",
    "preview-vid": "assets/vid/portfolio/aoc-vis.webm",
    "role": [
      "Author"
    ],
    "summary": "This one is actually part of a a project. I am participating in <a href='https://adventofcode.com/'>Advent of Code</a> 2024 and I want to visualize the algorithm (working on 2D data) I use to solve the problem. I use SFML to render the visualization.<br><br>The approach to rendering the algorithm is simple. At each step I update the algorithm working on the data, capture the state and convert them to an image data (RGB colors) then send it as Texture to the SFML renderer. The renderer then displays the texture on the window. The visualization is done in real-time so I can see the algorithm working on the data.",
    "techniques": [
      "CPU rendering"
    ],
    "technologies": [
      "C++",
      "SFML"
    ],
    "url": "https://github.com/mrizaln/aoc-2024-cpp"
  },
  "ascopet": {
    "date-end": "Apr 2025",
    "date-start": "Apr 2025",
    "name": "Asynchronous scope time measurement library",
    "preview-img": "assets/img/portfolio/ascopet.webp",
    "preview-img-thumb": "assets/img/portfolio/ascopet.thumb.webp",
    "preview-vid": null,
    "role": [
      "Author"
    ],
    "summary": "Profiling or monitoring performance of a given application is a common task in programming, no least in C++. One of the way to do that is to measure the time it takes to execute a given piece of code. This library attempts to provide that functionality by using C++ technique to measure how long a given scope to execute. Using a RAII type, we can record the time it is created and at the end of that type lifetime record the time it is destroyed, in effect measuring the lifetime of that object. If we place the object at the start of a scope, it effectively measure the duration of that scope.<br><br>The main motivation of creating this library is that I need a way to monitor my simulation project in real-time in the simulation app itself. While at it, I want the library to have little to no overhead on the execution of my simulation. This is achieved by using background thread to manage the timing records, using thread local storage to rapidly store the timing record, using double buffering on said thread local storage, and using atomics to lock-lessly synchronize the double buffer between the owner thread with the background thread. In the end, I manage to create a library with about 60ns (yes nanoseconds!) overhead on my 2.5 GHz 6 core Linux machine.",
    "techniques": [
      "API Design",
      "Lockless synchronization",
      "Multithreading",
      "RAII",
      "Thread local storage",
      "Double buffering"
    ],
    "technologies": [
      "C++",
      "Atomics",
      "Thread local"
    ],
    "url": "https://github.com/mrizaln/ascopet"
  },
  "calmind": {
    "date-end": "Jun 2023",
    "date-start": "May 2023",
    "name": "Calmind App - Meditation App",
    "preview-img": "assets/img/portfolio/calmind.webp",
    "preview-img-thumb": "assets/img/portfolio/calmind.thumb.webp",
    "preview-vid": null,
    "role": [
      "Contributor"
    ],
    "summary": "This project is a collaborative project with my friends in Bangkit Academy as the final project. The project is a meditation app that is designed to help people meditate. This application integrates an AI (Machine Learning Model that can infer emotion from text) to suggest the best meditation session for the user (in the form of nature sounds). I, for the most part, is resposible for integrating this feature locally (no cloud) while also working on other aspect of the application UI logic (the UI design is done by my friend). The app is written in Kotlin and uses Android Studio as the IDE.",
    "techniques": [
      "GUI"
    ],
    "technologies": [
      "Kotlin",
      "Android"
    ],
    "url": "https://github.com/fahmiidris007/CapstoneProjectBangkit"
  },
  "circbuf": {
    "date-end": "Jan 2025",
    "date-start": "Jun 2024",
    "name": "circbuf - Circular Buffer Library",
    "preview-img": "assets/img/portfolio/circbuf.webp",
    "preview-img-thumb": "assets/img/portfolio/circbuf.thumb.webp",
    "preview-vid": null,
    "role": [
      "Author"
    ],
    "summary": "There is no de facto circular buffer library that is freestanding. The most used one is in Boost which is a large library that I prefer not to use. I am in need of such data structure with good interface and this this library is created. The main features of the library includes but not limited to dynamic capacity, STL-compatibile including iterator support, and random access. At the moment this library is slower than the boost library but I intend to optimize it.",
    "techniques": [
      "API Design"
    ],
    "technologies": [
      "C++",
      "Circular buffer"
    ],
    "url": "https://github.com/mrizaln/circbuf"
  },
  "cmakestrap": {
    "date-end": "Apr 2025",
    "date-start": "Apr 2025",
    "name": "Simpler CMake project initializer script for C++",
    "preview-img": "assets/img/portfolio/cmakestrap.webp",
    "preview-img-thumb": "assets/img/portfolio/cmakestrap.thumb.webp",
    "preview-vid": null,
    "role": [
      "Author"
    ],
    "summary": "There are many project initializer script for C++ with CMake, the most famous one is cmake-init. Unfortunately, it generates too much files for my liking. Looking at this issue, that has been up for 2 years, it seems that the author does not have the time to provide an option to generate a simpler, thinner, project structure. This script is an attempt to provide that.",
    "techniques": [
      "Packaging"
    ],
    "technologies": [
      "Python",
      "PyPI"
    ],
    "url": "https://pypi.org/project/cmakestrap/"
  },
  "cppread": {
    "date-end": "Nov 2024",
    "date-start": "Sep 2024",
    "name": "Simple Console Input Library with Built-in Parser",
    "preview-img": "assets/img/portfolio/cppread.webp",
    "preview-img-thumb": "assets/img/portfolio/cppread.thumb.webp",
    "preview-vid": null,
    "role": [
      "Author"
    ],
    "summary": "Out of frustration of the C++ i/o system, I decided to create a simple library that allows me to read input from the console easily. The library also has a built-in parser that can parse the input into a specific type (int, float, string, etc) or you can create your own parser to parse the input into a custom type or override an existing parser for a type. The main feature of the library aside from the custom parsing is that it allows for easy input for multiple values (for example, for birth date input in 'y/m/d' format).",
    "techniques": [
      "API design",
      "Parsing"
    ],
    "technologies": [
      "C++",
      "i/o"
    ],
    "url": "https://github.com/mrizaln/cppread"
  },
  "doublebuf": {
    "date-end": "Jan 2025",
    "date-start": "Aug 2024",
    "name": "doublebuf - Lockless Double Buffering Library",
    "preview-img": "assets/img/portfolio/doublebuf.webp",
    "preview-img-thumb": "assets/img/portfolio/doublebuf.thumb.webp",
    "preview-vid": "assets/vid/portfolio/doublebuf.webm",
    "role": [
      "Author"
    ],
    "summary": "Working with a multithreading program is hard, especially when it comes to sharing data between threads. Double buffering is a technique that is used to solve this problem. This library is created to make it easier to use double buffering in a multithreading program. The main mechanism for the synchronization is atomics (std::atomic), thus, if the hardware allows it, this library is lockless.",
    "techniques": [
      "API Design",
      "Double buffering",
      "Lockless synchronization"
    ],
    "technologies": [
      "C++",
      "Atomics"
    ],
    "url": "https://github.com/mrizaln/doublebuf"
  },
  "dtl-modern": {
    "date-end": "Dec 2024",
    "date-start": "Dec 2024",
    "name": "Arbitrary Sequence Diff Library",
    "preview-img": "assets/img/portfolio/dtl-modern.webp",
    "preview-img-thumb": "assets/img/portfolio/dtl-modern.thumb.webp",
    "preview-vid": null,
    "role": [
      "Author",
      "Contributor"
    ],
    "summary": "There is no good diff library in C++. I found one, but it has very old API design, philosophy and inflexible in general. This one is a direct fork of said library, <a href='https://github.com/cubicdaiya/dtl'>dtl</a>. This fork aims to modernize the library by refactoring the code, adding more features, and making the API more flexible and modern (C++20 ranges support). The library is used to compare two sequences and produce a diff of the two sequences, of any type as long as you provide a comparator for them.<br><br>Really the reason I forked and modernize the library is to have an easy to use pretty diff printer on test output on my projects :D",
    "techniques": [
      "Diff algorithm",
      "Refactoring"
    ],
    "technologies": [
      "C++",
      "diff"
    ],
    "url": "https://github.com/mrizaln/dtl-modern"
  },
  "game-of-life": {
    "date-end": "Jan 2023",
    "date-start": "Mar 2022",
    "name": "Conway's Game of Life",
    "preview-img": "assets/img/portfolio/game-of-life.webp",
    "preview-img-thumb": "assets/img/portfolio/game-of-life.thumb.webp",
    "preview-vid": "assets/vid/portfolio/game-of-life.webm",
    "role": [
      "Author"
    ],
    "summary": "I have always liked Conway's Game of Life simulation. This very complex system arise from simple set of rules fascinates me. This project allows me to create such simulation. I can directly modify the cells state on the simulation so that I can create anything I want. For example, in the preview I created a glider gun and a period-3 oscillator.",
    "techniques": [
      "Multithreading",
      "CPU rendering"
    ],
    "technologies": [
      "C++",
      "OpenGL",
      "GLFW"
    ],
    "url": "https://github.com/mrizaln/game-of-life"
  },
  "glfw-cpp": {
    "date-end": "Jan 2025",
    "date-start": "Apr 2024",
    "name": "GLFW RAII Wrapper for C++ (and more)",
    "preview-img": "assets/img/portfolio/glfw-cpp.webp",
    "preview-img-thumb": "assets/img/portfolio/glfw-cpp.thumb.webp",
    "preview-vid": null,
    "role": [
      "Author"
    ],
    "summary": "C is not my favorite language. It lacks type safety, namespaces, and especially RAII. GLFW is a C library that is used to create windows and OpenGL contexts. This project is essentially a wrapper that fixed the issues I have with GLFW. The wrapper is designed to be type safe, RAII, and easy to use. This library also eliminates the need for global/hidden state that GLFW has (partially, the global state in the C++ side still exists to communicate with the global state on the C side) by wrapping the main glfw object as a RAII object. This library also change the way of the events handled, instead of using callback functions, it uses polling mechanism to get the events. The biggest aim of this GLFW is to make it easy to create multiple windows that may live independently on its own thread which I considers as a very important feature.",
    "techniques": [
      "API design",
      "Event handling",
      "Abstraction",
      "Wrapper",
      "RAII",
      "Type safety"
    ],
    "technologies": [
      "C++",
      "GLFW",
      "Windowing system"
    ],
    "url": "https://github.com/mrizaln/glfw-cpp"
  },
  "hangman": {
    "date-end": "Dec 2024 (recently rewritten)",
    "date-start": "Jan 2022",
    "name": "Hangman",
    "preview-img": "assets/img/portfolio/hangman.webp",
    "preview-img-thumb": "assets/img/portfolio/hangman.thumb.webp",
    "preview-vid": "assets/vid/portfolio/hangman.webm",
    "role": [
      "Author"
    ],
    "summary": "This project was my first endeavor into C++ programming. I created this project to learn the basics of C++ programming. The project is a simple hangman game that is played in the console. The game is very simple, the player has to guess the word by guessing the letters. The player has a limited number of guesses before the game ends. The game has a simple ASCII art of the hangman that is drawn as the player guesses the wrong letter.<br><br>The code was <a href='https://github.com/mrizaln/hangman/blob/80798cb485d83074474bf2c330333b607efe164b/hangman.cpp'>awful</a>, so recently I decided to rewrite the code to be more modern and be more flexible by allowing custom word list (by default it uses /usr/share/dict/words).",
    "techniques": [
      "Console cursor control"
    ],
    "technologies": [
      "C++",
      "TUI"
    ],
    "url": "https://github.com/mrizaln/hangman"
  },
  "julia-set": {
    "date-end": "May 2023",
    "date-start": "Jan 2023",
    "name": "Julia Set Renderer",
    "preview-img": "assets/img/portfolio/julia-set.webp",
    "preview-img-thumb": "assets/img/portfolio/julia-set.thumb.webp",
    "preview-vid": "assets/vid/portfolio/julia-set.webm",
    "role": [
      "Author"
    ],
    "summary": "Julia Set is similar to Mandelbrot in that it shows <em>pretty images</em> (what a shallow understanding, haha). The similarity of Julia Set and Mandelbrot Set lies in the equation that produces the set, both uses the same equation but different variable. Since the Mandelbrot Set and Julia Set are related, this renderer also draws the Mandelbrot in the background. If the point in which the Julia Set is evaluated lies inside the Mandelbrot Set (white), the Julia Set will be connected, otherwise the Julia Set will be disconnected.</br></br>Unlike previous attempt at rendering a <a href='proj-details.html?proj=mandelbrot-set'>Mandelbrot Set</a> using CPU rendering, this one uses GPU rendering (leveraging GLSL). This makes the renderer much faster and responsive.",
    "techniques": [
      "Multithreading",
      "GPU rendering"
    ],
    "technologies": [
      "C",
      "OpenGL",
      "GLFW",
      "GLSL"
    ],
    "url": "https://github.com/mrizaln/julia-set"
  },
  "loxx": {
    "date-end": "Oct 2024",
    "date-start": "Sep 2024",
    "name": "Lox Programming Language Interpreter",
    "preview-img": "assets/img/portfolio/loxx.webp",
    "preview-img-thumb": "assets/img/portfolio/loxx.thumb.webp",
    "preview-vid": null,
    "role": [
      "Author"
    ],
    "summary": "Programming language is a very interesting topic for me. I have always wanted to create my own language interpreter/compiler. This project is my attempt at creating an interpreter for a language called Lox. Lox is a very simple language created by <a href='https://craftinginterpreters.com/'>Bob Nystrom</a> in his book <em>Crafting Interpreters</em>. The interpreter is implemented in Rust just because. The interpreter is implemented in a very simple way, it lexes the input, parses the tokens, and interprets the AST. The interpreter is very simple and does not have any optimization.<br><br>At the moment I have only implemented a Treewalk Interpreter whith reference counting (Rust's Rc) as the garbage collection mechanism. In the future I plan on implementing a bytecode interpreter with the garbage collection implemented manually in the Rust code.",
    "techniques": [
      "Lexing",
      "Parsing",
      "Interpreting"
    ],
    "technologies": [
      "Rust",
      "Lox",
      "Interpreter"
    ],
    "url": "https://github.com/mrizaln/loxx"
  },
  "mandelbrot-set": {
    "date-end": "Jan 2023",
    "date-start": "Dec 2022",
    "name": "Mandelbrot Set Renderer",
    "preview-img": "assets/img/portfolio/mandelbrot-set.webp",
    "preview-img-thumb": "assets/img/portfolio/mandelbrot-set.thumb.webp",
    "preview-vid": "assets/vid/portfolio/mandelbrot-set.webm",
    "role": [
      "Author"
    ],
    "summary": "Ever since I saw a video about Mandelbrot Set on Youtube, I've always wanted to make <strong>my own</strong> renderer. This is my attempt. The rendering is done in the CPU so it's very slow even though I have utilized multithreading.</br></br>The next attempt is rendering a <a href='proj-details.html?proj=julia-set'>Julia Set</a> but using GPU rendering technique which is much much faster.",
    "techniques": [
      "Multithreading",
      "CPU rendering"
    ],
    "technologies": [
      "C++",
      "OpenGL",
      "GLFW"
    ],
    "url": "https://github.com/mrizaln/mandelbrot-set"
  },
  "pong": {
    "date-end": "Sep 2024",
    "date-start": "Apr 2024",
    "name": "Pong",
    "preview-img": "assets/img/portfolio/pong.webp",
    "preview-img-thumb": "assets/img/portfolio/pong.thumb.webp",
    "preview-vid": "assets/vid/portfolio/pong.webm",
    "role": [
      "Author"
    ],
    "summary": "This project comes into existence from me watching a <a href='https://www.youtube.com/watch?v=8U3hl8XMm8c'>talk</a> from Herb Sutter about Cppfront and C++ syntax 2.0. This technology allows the developer to generate (transpile to) C++ code from a higher level language which I will call C++2. Just for fun I tried to use this language which pretty much feels like C++ (value semantics, RAII) but with better syntax (C++2 aims to have a unified syntax for all the declaration, from variables, functions, closures, classes, namespaces, all of them).<br><br>In order for me to try the language effectively, I decided to try making a game in this case Pong since it seems to be easy to implement. The game is created with the help of SFML which was the first time I use it. It was fairly easy to use using its built-in primitive renderable objects. Since it's a pong, a collision logic also implemented.",
    "techniques": [
      "Transpilation"
    ],
    "technologies": [
      "C++",
      "SFML",
      "Cppfront"
    ],
    "url": "https://github.com/mrizaln/pong-cpp2"
  },
  "qoipp": {
    "date-end": "Jun 2024",
    "date-start": "May 2024",
    "name": "A Quite OK Image Format Codec in C++",
    "preview-img": "assets/img/portfolio/qoipp.webp",
    "preview-img-thumb": "assets/img/portfolio/qoipp.thumb.webp",
    "preview-vid": null,
    "role": [
      "Author"
    ],
    "summary": "At the end of a <a href='https://www.youtube.com/watch?v=EFUYNoFRHQI'>YouTube video</a> about PNG and how it works, the creator of said video mentioned an alternative image format called <a href='https://qoiformat.org'>QOI</a> which was created by a single person. Unlike PNG which was a very complex mechanism of image lossless compression, QOI was a very simple format which was very surprising since the compression rate is comparable to PNG! Intrigued by this, I decided to implement a codec for this format in C++ by following the <a href='https://qoiformat.org/qoi-specification.pdf'>specificiation</a> (just one page, how simple is that!) directly.",
    "techniques": [
      "API design",
      "Abstraction"
    ],
    "technologies": [
      "C++",
      "qoi",
      "codec"
    ],
    "url": "https://github.com/mrizaln/qoipp"
  },
  "qoiview": {
    "date-end": "Jan 2025",
    "date-start": "Jan 2025",
    "name": "QoiView - Simple qoi Image Viewer",
    "preview-img": "assets/img/portfolio/qoipp.webp",
    "preview-img-thumb": "assets/img/portfolio/qoipp.thumb.webp",
    "preview-vid": "assets/vid/portfolio/qoiview.webm",
    "role": [
      "Author"
    ],
    "summary": "Out of frustation of me unable to view qoi image using feh (without conversion first, which is slow) and imv (no support for qoi), I decided to create a simple qoi image viewer. The viewer can do zooming, panning, and filtering on the image displayed. It is familiar enough for imv user since it uses familiar keybinds for the actions. The viewer is created using GLFW and OpenGL to render the image. The image is rendered using a single quad that is textured with the qoi image data. The image data is decoded using my own qoipp library. <br><br><i>apparently, cloc measure the codebase to be only about 600 lines of C++ code!</i>",
    "techniques": [
      "Graphics rendering"
    ],
    "technologies": [
      "C++",
      "qoi",
      "codec",
      "GLFW",
      "OpenGL"
    ],
    "url": "https://github.com/mrizaln/qoiview"
  },
  "ray-tracing": {
    "date-end": "Apr 2024",
    "date-start": "Mar 2024",
    "name": "Ray Tracing",
    "preview-img": "assets/img/portfolio/ray-tracing.webp",
    "preview-img-thumb": "assets/img/portfolio/ray-tracing.thumb.webp",
    "preview-vid": null,
    "role": [
      "Author"
    ],
    "summary": "Ray tracing has always been a mystery to me. Ever since I stumble upon it, I've always wanted to learn more of this rendering technique. This project is my attempt at creating a ray tracer. I followed <a href='https://raytracing.github.io/'>Ray Tracing in One Weekend</a> and implemented it in Rust just because.",
    "techniques": [
      "Ray Tracing",
      "Multithreading",
      "CPU rendering"
    ],
    "technologies": [
      "Rust"
    ],
    "url": "https://github.com/mrizaln/ray-tracing-rust"
  },
  "secret-string": {
    "date-end": "Apr 2024",
    "date-start": "Apr 2024",
    "name": "secret-string - Compile-time String Literal Obfuscation Library",
    "preview-img": "assets/img/portfolio/secret-string.webp",
    "preview-img-thumb": "assets/img/portfolio/secret-string.thumb.webp",
    "preview-vid": null,
    "role": [
      "Author"
    ],
    "summary": "To test out C++ compile-time capabilities, I decided to create a library that obfuscates string literals at compile-time. This library is very simple, but very much customizable. One can customize the obfuscator to xor the string with a key, or to encrypt the string with a cipher, or to do anything with the string as long as it is done at compile-time. The obfuscated string are then can only be read by deobfuscating the string in runtime which incur a runtime cost, albeit very small (creating a wrapper that caches the deobfuscated string is a great idea to alleviate this).",
    "techniques": [
      "API Design",
      "Compile-time",
      "String obfuscation"
    ],
    "technologies": [
      "C++",
      "Compile-time"
    ],
    "url": "https://github.com/mrizaln/secret-string"
  },
  "simple-crud": {
    "date-end": "Jan 2024",
    "date-start": "Jan 2024",
    "name": "Console-based CRUD Application",
    "preview-img": "assets/img/portfolio/simple-crud.webp",
    "preview-img-thumb": "assets/img/portfolio/simple-crud.thumb.webp",
    "preview-vid": "assets/vid/portfolio/simple-crud.webm",
    "role": [
      "Author"
    ],
    "summary": "Most of the first C++ projects I see online somehow are console-based CRUD application. My fried who also learned C++ created this console-based CRUD application by following a tutorial, so I said to myself why not I create one as well? What this project do is basically emulating a database, very simple one. The challenge then is serialization, most of which are string. The reference tutorial used fixed length string which is not very flexible. To spice things up I decided to allow the string to have dynamic length and implemented a simple Length-Value encoding for it. This way I can store any string of any length in the file. While the reference tutorial manipulate the file directly when modification is done to the data, my implementation cannot because of the dynamic length of the string. So I decided to read the whole file into memory, modify the data in memory, then write the whole file back to the disk. This works for this small scale project and small data size, but won't scale well for large data size. At the end of the day this is just a simple database emulation, so it's fine.",
    "techniques": [
      "File I/O",
      "LV encoding",
      "Serialization"
    ],
    "technologies": [
      "C++",
      "TUI"
    ],
    "url": "https://github.com/mrizaln/simple-crud"
  },
  "simple-ecs": {
    "date-end": "Nov 2024",
    "date-start": "Nov 2024",
    "name": "Simple ECS",
    "preview-img": "assets/img/portfolio/simple-ecs.webp",
    "preview-img-thumb": "assets/img/portfolio/simple-ecs.thumb.webp",
    "preview-vid": "assets/vid/portfolio/simple-ecs.webm",
    "role": [
      "Author"
    ],
    "summary": "Entity Component System (ECS) is a programming technique that is on the rise in the game development community. ECS promises games to have better performance when working with large number of entities if it was implemented in it. I implemented this ECS using very modern C++ (C++23) which allows me to try different approach from the <a href='https://austinmorlan.com/posts/entity_component_system/'>reference</a> I'm using to implement this project. My implementation uses a templated classes to generate the ECS setup so I can expand it without much of a hassle. On this occasion I learned so much about template metaprogramming that allows this approach to be viable.",
    "techniques": [
      "ECS"
    ],
    "technologies": [
      "C++",
      "OpenGL",
      "GLFW"
    ],
    "url": "https://github.com/mrizaln/simple-ecs"
  },
  "sync-cpp": {
    "date-end": "Jan 2025",
    "date-start": "Jan 2024",
    "name": "sync-cpp - Hassle-free Synchronized Container Library",
    "preview-img": "assets/img/portfolio/sync-cpp.webp",
    "preview-img-thumb": "assets/img/portfolio/sync-cpp.thumb.webp",
    "preview-vid": null,
    "role": [
      "Author"
    ],
    "summary": "C++ synchronization primitives are weird. Instead of protecting data from being accessed/modified by multiple threads at the same time, it protects a block of code from being ran by multiple threads at the same time. This is very error prone, since often times in a block of code you access/modify multiple data at the same time on which you might forget to lock the mutex, or worse locking wrong mutex. The fact that the data that needs protection and mutex used to protect the data are separated make this kind of error easy to perform. This library fixed the aforementioned issue by tying the mutex to the data that needs protection directly by wrapping both of them in a single wrapper. Every access/modification to the data can only be carried by the function provided by the wrapper through a lambda, function pointer, or member function pointer of the data. This way, the data is always protected by the mutex. At the moment there is no way to lock multiple data at the same time, but I plan to implement it in the future.",
    "techniques": [
      "API Design",
      "Synchronization",
      "Thread safety"
    ],
    "technologies": [
      "C++",
      "Mutex"
    ],
    "url": "https://github.com/mrizaln/sync-cpp"
  }
}
